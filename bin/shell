#!/usr/bin/env node --harmony
'use strict';

const program = require('commander');
const pck = require('./../package.json');
const { prompt } = require('inquirer');
const chalk = require('chalk');
const figlet = require('figlet');
const path = require('path');
const fs = require('fs');
const ora = require('ora');
const { Duplex  } = require('stream');

console.log(
    chalk.yellow(
        figlet.textSync('Moore  CLI', {
            horizontalLayout: 'fitted'
        })
    )
);

// 直接生成模板代码
program.version(pck.version)
    .usage('<command> [options]')

    .option('-n, -new', '创建新的模板组件文件夹')
    .command('new')
    .alias('n')
    
    .action(async function(){
        const answers = await prompt([
            {type: 'input', message: '请输入名称', name: 'componentName'}
        ]),
        pageName = answers.componentName;
        
        if( pageName === '' ) return console.log(chalk.red('请输入组件名称...'));

        const cwdPath = process.cwd(),
            modulePath = path.join(cwdPath, 'components'),
            tplPath = path.join(cwdPath, `dev_template`);
        
        const dirNameArray = fs.readdirSync(modulePath),
            hasSame = dirNameArray.some(name=>name === pageName);
        if( hasSame ) return console.log(chalk.red(`存在重复的模块名称 ${pageName} ....`));

        const startLoading = ora('正在处理!').start();
        fs.mkdirSync(path.join(modulePath, pageName));
        
        const destPath = path.join(modulePath, pageName);
        
        function copy(src, dest) {
            let paths = fs.readdirSync(src);
            paths.forEach(item=>{
                var _src = path.resolve(src, item),
                    _dest = path.resolve(dest, item),
                    stats = fs.statSync(_src);

                if( stats.isFile() ){
                    let read = fs.createReadStream(_src);
                    let write = fs.createWriteStream(_dest);
                    read.pipe(write);
                } else if( stats.isDirectory() ) {
                    if( !fs.existsSync(_dest) ) fs.mkdirSync(_dest);
                    copy(_src, _dest);
                }
            });
        }

        copy(tplPath, destPath);
        startLoading.succeed('初始化完成!');
    });

program.parse(process.argv);

console.log()
process.on('exit', () => {
    console.log()
})